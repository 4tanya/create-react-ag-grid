{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onGridReady","params","gridApi","api","updateData","data","setState","rowData","onButtonClick","e","selectedData","getSelectedNodes","map","node","selectedDataStringPresentation","athlete","sport","join","document","querySelector","innerHTML","length","concat","state","columnDefs","headerName","children","field","width","checkboxSelection","rowGroup","rowGroupIndex","hide","defaultColDef","editable","enableValue","sortable","resizable","filter","defaultGroupSortComparator","nodeA","nodeB","key","paginationPageSize","rowBuffer","rowSelection","_this2","fetch","then","result","json","react_default","a","createElement","className","onClick","main","pagination","allowContextMenuWithControlKey","groupUseEntireRow","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSA8GeA,sBAvGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA2DRQ,YAAc,SAAAC,GACZR,EAAKS,QAAUD,EAAOE,IAEtBV,EAAKW,WAAa,SAAAC,GAChBZ,EAAKa,SAAS,CAAEC,QAASF,MAhEVZ,EA4FnBe,cAAgB,SAAAC,GACd,IACMC,EADgBjB,EAAKS,QAAQS,mBACAC,IAAK,SAAAC,GAAI,OAAIA,EAAKR,OAC/CS,EAAiCJ,EAAaE,IAClD,SAAAC,GAAI,MAAI,YAAcA,EAAKE,QAAU,YAAcF,EAAKG,QAAOC,KAAK,SACtEC,SAASC,cAAc,qCAAqCC,UAAcV,EAAaW,OAAf,yBAAAC,OAE3CR,GAD3B,qBA/FFrB,EAAK8B,MAAQ,CACTC,WAAY,CACV,CACEC,WAAY,kBACZC,SAAU,CACR,CACED,WAAY,UACZE,MAAO,UACPC,MAAO,IACPC,mBAAmB,GAErB,CAACJ,WAAY,MAAOE,MAAO,OAC3B,CAACF,WAAY,UAAWE,MAAO,UAAWG,UAAU,EAAMC,cAAe,EAAGC,MAAM,KAGtF,CACIP,WAAY,iBACZC,SAAU,CACN,CAACD,WAAY,OAAQE,MAAO,QAC5B,CAACF,WAAY,OAAQE,MAAO,QAC5B,CAACF,WAAY,QAASE,MAAO,QAASC,MAAO,IAAKE,UAAU,EAAMC,cAAe,EAAGC,MAAM,GAC1F,CAACP,WAAY,OAAQE,MAAO,QAC5B,CAACF,WAAY,SAAUE,MAAO,UAC9B,CAACF,WAAY,SAAUE,MAAO,UAC9B,CAACF,WAAY,QAASE,MAAO,YAIvCM,cAAe,CACbL,MAAO,GACPM,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,QAAQ,GAEVC,2BAA4B,SAASC,EAAOC,GAC1C,OAAID,EAAME,IAAMD,EAAMC,KACZ,EACCF,EAAME,IAAMD,EAAMC,IACpB,EAEA,GAGXC,mBAAoB,GACpBC,UAAW,GACXC,aAAc,YAlDDpD,mFAsDC,IAAAqD,EAAAlD,KAClBmD,MAAM,0GACHC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAzC,GAAO,OAAIuC,EAAK1C,WAAWG,sCAYnC,OACE4C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACXH,EAAAC,EAAAC,cAAA,UAAQE,QAAS3D,KAAKY,cAAe8C,UAAU,sBAA/C,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACfH,EAAAC,EAAAC,cAACG,EAAA,YAAD,CACIhC,WAAY5B,KAAK2B,MAAMC,WACvBS,cAAerC,KAAK2B,MAAMU,cAC1BU,mBAAoB/C,KAAK2B,MAAMoB,mBAC/Bc,YAAY,EACZb,UAAWhD,KAAK2B,MAAMqB,UACtBc,gCAAgC,EAChCC,mBAAmB,EACnBpB,2BAA4B3C,KAAK2B,MAAMgB,2BACvCM,aAAcjD,KAAK2B,MAAMsB,aACzB7C,YAAaJ,KAAKI,YAClBO,QAASX,KAAK2B,MAAMhB,mBAtFlBqD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASlD,SAASmD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.384eb74a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        columnDefs: [\n          {\n            headerName: \"Athlete Details\",\n            children: [\n              {\n                headerName: \"Athlete\", \n                field: \"athlete\",\n                width: 200,\n                checkboxSelection: true\n              },\n              {headerName: \"Age\", field: \"age\"},\n              {headerName: \"Country\", field: \"country\", rowGroup: true, rowGroupIndex: 1, hide: true},\n            ]\n          },\n          {\n              headerName: \"Sports Results\",\n              children: [\n                  {headerName: \"Year\", field: \"year\"},\n                  {headerName: \"Date\", field: \"date\"},\n                  {headerName: \"Sport\", field: \"sport\", width: 170, rowGroup: true, rowGroupIndex: 0, hide: true},\n                  {headerName: \"Gold\", field: \"gold\"},\n                  {headerName: \"Silver\", field: \"silver\"},\n                  {headerName: \"Bronze\", field: \"bronze\"},\n                  {headerName: \"Total\", field: \"total\"}\n              ]\n          }\n        ],\n        defaultColDef: {\n          width: 90,\n          editable: true,\n          enableValue: true,\n          sortable: true,\n          resizable: true,\n          filter: true\n        },\n        defaultGroupSortComparator: function(nodeA, nodeB) {\n          if (nodeA.key < nodeB.key) {\n            return -1;\n          } else if (nodeA.key > nodeB.key) {\n            return 1;\n          } else {\n            return 0;\n          }\n        },\n        paginationPageSize: 15,\n        rowBuffer: 15,\n        rowSelection: \"multiple\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinners.json\")\n      .then(result => result.json())\n      .then(rowData => this.updateData(rowData))\n  }\n\n  onGridReady = params => {\n    this.gridApi = params.api;\n\n    this.updateData = data => {\n      this.setState({ rowData: data });\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"c-ag-greed\">\n        <div className=\"ag-theme-balham-dark c-ag-greed__table-wrapper\">\n            <button onClick={this.onButtonClick} className=\"c-ag-greed__button\">Get selected rows</button>\n            <div className=\"c-ag-greed__selected-rows-output\"></div>\n            <AgGridReact\n                columnDefs={this.state.columnDefs}\n                defaultColDef={this.state.defaultColDef}\n                paginationPageSize={this.state.paginationPageSize}\n                pagination={true}\n                rowBuffer={this.state.rowBuffer}              \n                allowContextMenuWithControlKey={true}\n                groupUseEntireRow={true}\n                defaultGroupSortComparator={this.state.defaultGroupSortComparator}\n                rowSelection={this.state.rowSelection}\n                onGridReady={this.onGridReady}\n                rowData={this.state.rowData}>\n            </AgGridReact>\n        </div>\n      </div>\n    );\n  }\n\n  onButtonClick = e => {\n    const selectedNodes = this.gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map( node => node.data );\n    const selectedDataStringPresentation = selectedData.map( \n      node => 'Athlete: ' + node.athlete + ', Sport: ' + node.sport).join('<br/>');\n    document.querySelector(\".c-ag-greed__selected-rows-output\").innerHTML = (!selectedData.length)?\n      'No nodes selected'\n      : `Selected nodes:<br /> ${selectedDataStringPresentation}`; \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}